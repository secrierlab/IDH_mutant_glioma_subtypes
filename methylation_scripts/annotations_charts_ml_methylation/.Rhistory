geom_jitter(shape=16, position=position_jitter(0.2),aes(color = meth_levels))+scale_colour_gradient(low="#FFBC42",high="#8F2D56")+theme_bw()
dev.off()
pdf("LGGpredictions.pdf")
ggplot(current_lgg, aes(x=variable, y=prob))+geom_boxplot()+ggtitle(nsamples)+ylab("Probability")+
geom_jitter(shape=16, position=position_jitter(0.2),aes(color = meth_levels))+scale_colour_gradient(low="#FFBC42",high="#006BA6")+theme_bw()
dev.off()
pdf("LGGpredictions.pdf")
ggplot(current_lgg, aes(x=variable, y=prob))+geom_boxplot()+ggtitle(nsamples)+ylab("Probability")+
geom_jitter(shape=16, position=position_jitter(0.2),aes(color = meth_levels))+scale_colour_gradient(low="#FFBC42",high="#28587B")+theme_bw()
dev.off()
ggplot(current_lgg, aes(x=variable, y=prob))+geom_boxplot()+ggtitle(nsamples)+ylab("Probability")+
geom_jitter(shape=16, position=position_jitter(0.2),aes(color = meth_levels))+scale_colour_gradient(low="#EEEEFF",high="#28587B")+theme_bw()
dev.off()
pdf("LGGpredictions.pdf")
ggplot(current_lgg, aes(x=variable, y=prob))+geom_boxplot()+ggtitle(nsamples)+ylab("Probability")+
geom_jitter(shape=16, position=position_jitter(0.2),aes(color = meth_levels))+scale_colour_gradient(low="#EEEEFF",high="#28587B")+theme_bw()
dev.off()
pdf("LGGpredictions.pdf")
ggplot(current_lgg, aes(x=variable, y=prob))+geom_boxplot()+ggtitle(nsamples)+ylab("Probability")+
geom_jitter(shape=16, position=position_jitter(0.2),aes(color = meth_levels))+scale_colour_gradient(low="#FFBC42",high="#28587B")+theme_bw()
dev.off()
pdf("LGGpredictions.pdf")
ggplot(current_lgg, aes(x=variable, y=prob))+geom_boxplot()+ggtitle(nsamples)+ylab("Probability")+
geom_jitter(shape=16, position=position_jitter(0.2),aes(color = meth_levels))+scale_colour_gradient(low="#FFC4D1",high="#28587B")+theme_bw()
dev.off()
current_lgg
current_lgg[1:4,]
library(dplyr)
library(ggplot2)
cw_summary <- current_lgg %>%
group_by(variable) %>%
tally()
pdf("LGGpredictions.pdf")
ggplot(current_lgg, aes(x=variable, y=prob))+geom_boxplot()+ggtitle(nsamples)+ylab("Probability")+
geom_jitter(shape=16, position=position_jitter(0.2),aes(color = meth_levels))+scale_colour_gradient(low="#FFC4D1",high="#28587B")+theme_bw()+
stat_summary(fun.y = median, fun.ymax = length,
geom = "text", aes(label = ..ymax..), vjust = -1)
dev.off()
pdf("LGGpredictions.pdf")
ggplot(current_lgg, aes(x=variable, y=prob))+geom_boxplot()+ggtitle(nsamples)+ylab("Probability")+
geom_jitter(shape=16, position=position_jitter(0.2),aes(color = meth_levels))+scale_colour_gradient(low="#FFC4D1",high="#28587B")+theme_bw()+
geom_text(data = cw_summary,
aes(variable, Inf, label = n), vjust = 1)
dev.off()
current_lgg
current_lgg[1:4,]
cw_summary <- current_lgg %>%
group_by(variable,prob>=0.5) %>%
tally()
cw_summary
pdf("LGGpredictions.pdf")
ggplot(current_lgg, aes(x=variable, y=prob))+geom_boxplot()+ggtitle(nsamples)+ylab("Probability")+
geom_jitter(shape=16, position=position_jitter(0.2),aes(color = meth_levels))+scale_colour_gradient(low="#FFC4D1",high="#28587B")+theme_bw()+
geom_text(data = cw_summary,
aes(variable, Inf, label = n), vjust = 1)
dev.off()
pdf("LGGpredictions.pdf")
ggplot(current_lgg, aes(x=variable, y=prob))+geom_boxplot()+ggtitle(nsamples)+ylab("Probability")+
geom_jitter(shape=16, position=position_jitter(0.2),aes(color = meth_levels))+scale_colour_gradient(low="#FFC4D1",high="#28587B")+theme_bw()+
geom_text(data = cw_summary,
aes(variable, Inf, label = n), vjust = 1)
dev.off()
cw_summary
cw_summary <- current_lgg %>%
group_by(variable,(prob>=0.5)==TRUE) %>%
tally()
cw_summary
cw_summary <- current_lgg %>%
group_by(variable,prob>=0.5) %>%
tally()
cw_summary
pdf("LGGpredictions.pdf")
ggplot(current_lgg, aes(x=variable, y=prob))+geom_boxplot()+ggtitle(nsamples)+ylab("Probability")+
geom_jitter(shape=16, position=position_jitter(0.2),aes(color = meth_levels))+scale_colour_gradient(low="#FFC4D1",high="#28587B")+theme_bw()+
geom_text(data = cw_summary,
aes(variable, Inf, label = n), vjust = 1)+
geom_hline(yintercept = 0.5, linetype="dotted",
color = "grey", size=1.5)
dev.off()
pdf("LGGpredictions.pdf")
ggplot(current_lgg, aes(x=variable, y=prob))+geom_boxplot()+ggtitle(nsamples)+ylab("Probability")+
geom_jitter(shape=16, position=position_jitter(0.2),aes(color = meth_levels))+scale_colour_gradient(low="#FFC4D1",high="#28587B")+theme_bw()+
geom_text(data = cw_summary,
aes(variable, Inf, label = n), vjust = 1)+
geom_hline(yintercept = 0.5, linetype="dotted",
color = "darkgrey", size=0.5)
dev.off()
cw_summary[1:4,]
table(cw_summary[,c("variable","prob>=0.5")]
)
cw_summary <- current_lgg %>%
group_by(variable,prob>=0.5) %>%
tally()
cw_summary
current_lgg[1:4,]
current_lgg[which(current_lgg$prob>=0.5),]
table(current_lgg[which(current_lgg$prob>=0.5),]$variable)
table(current_lgg[which(current_lgg$prob<0.05),]$variable)
length(current_lgg$variable=="IDH-yes")
which(current_lgg$variable=="IDH-yes")
table(current_lgg[which(current_lgg$prob>=0.5),]$variable)
table(current_lgg$variable)
current_lgg$Classif <- sapply (current_lgg$prob,
function(x) ifelse(x>=0.5,"yes","no"))
current_lgg[1:4,]
table(current_lgg[,c("variable","Classif")])
dim(current_lgg)
table(current_lgg$variable)
current_lgg$prov
current_lgg$prob
table(current_lgg[,c("variable","Classif")])
t <- table(current_lgg[,c("variable","Classif")])
t[,2]/(t[,2]+t[,1])
t.frac <- t[,2]/(t[,2]+t[,1])
df.frac <- data.frame(Class=names(t.frac),Fraction=t.frac)
df.frac
pdf("LGGpredictions.pdf")
ggplot(current_lgg, aes(x=variable, y=prob))+geom_boxplot()+ggtitle(nsamples)+ylab("Probability")+
geom_jitter(shape=16, position=position_jitter(0.2),aes(color = meth_levels))+scale_colour_gradient(low="#FFC4D1",high="#28587B")+theme_bw()+
geom_text(data = df.frac,
aes(Class, Inf, label = n), vjust = 1)+
geom_hline(yintercept = 0.5, linetype="dotted",
color = "darkgrey", size=0.5)
dev.off()
df.frac <- data.frame(variable=names(t.frac),Fraction=t.frac)
pdf("LGGpredictions.pdf")
ggplot(current_lgg, aes(x=variable, y=prob))+geom_boxplot()+ggtitle(nsamples)+ylab("Probability")+
geom_jitter(shape=16, position=position_jitter(0.2),aes(color = meth_levels))+scale_colour_gradient(low="#FFC4D1",high="#28587B")+theme_bw()+
geom_text(data = df.frac,
aes(variable, Inf, label = n), vjust = 1)+
geom_hline(yintercept = 0.5, linetype="dotted",
color = "darkgrey", size=0.5)
dev.off()
pdf("LGGpredictions.pdf")
ggplot(current_lgg, aes(x=variable, y=prob))+geom_boxplot()+ggtitle(nsamples)+ylab("Probability")+
geom_jitter(shape=16, position=position_jitter(0.2),aes(color = meth_levels))+scale_colour_gradient(low="#FFC4D1",high="#28587B")+theme_bw()+
geom_text(data = df.frac,
aes(variable, Inf, label = Frac), vjust = 1)+
geom_hline(yintercept = 0.5, linetype="dotted",
color = "darkgrey", size=0.5)
dev.off()
pdf("LGGpredictions.pdf")
ggplot(current_lgg, aes(x=variable, y=prob))+geom_boxplot()+ggtitle(nsamples)+ylab("Probability")+
geom_jitter(shape=16, position=position_jitter(0.2),aes(color = meth_levels))+scale_colour_gradient(low="#FFC4D1",high="#28587B")+theme_bw()+
geom_text(data = df.frac,
aes(variable, Inf, label = Fraction), vjust = 1)+
geom_hline(yintercept = 0.5, linetype="dotted",
color = "darkgrey", size=0.5)
dev.off()
df.frac <- data.frame(variable=names(t.frac),Fraction=round(t.frac,2))
pdf("LGGpredictions.pdf")
ggplot(current_lgg, aes(x=variable, y=prob))+geom_boxplot()+ggtitle(nsamples)+ylab("Probability")+
geom_jitter(shape=16, position=position_jitter(0.2),aes(color = meth_levels))+scale_colour_gradient(low="#FFC4D1",high="#28587B")+theme_bw()+
geom_text(data = df.frac,
aes(variable, Inf, label = Fraction), vjust = 1)+
geom_hline(yintercept = 0.5, linetype="dotted",
color = "darkgrey", size=0.5)
dev.off()
pdf("LGGpredictions.scatterplot.pdf")
ggscatter(current_lgg, x = "meth_levels", y = "prob",
color = "variable")+
facet_wrap(~variable)
dev.off()
pdf("LGGpredictions.scatterplot.pdf")
ggscatter(current_lgg, x = "meth_levels", y = "prob",
add = "loess")+
facet_wrap(~variable,ncol=2)
dev.off()
pdf("LGGpredictions.scatterplot.pdf")
ggscatter(current_lgg, x = "meth_levels", y = "prob",
add = "loess", color = "#28587B")+
facet_wrap(~variable,ncol=2)
dev.off()
pdf("LGGpredictions.scatterplot.pdf")
ggscatter(current_lgg, x = "meth_levels", y = "prob",
add = "lm", color = "#28587B")+
facet_wrap(~variable,ncol=3)
dev.off()
pdf("LGGpredictions.scatterplot.pdf")
ggscatter(current_lgg, x = "meth_levels", y = "prob",
add = "reg.line", color = "#28587B")+
facet_wrap(~variable,ncol=3)
dev.off()
pdf("LGGpredictions.scatterplot.pdf")
ggscatter(current_lgg, x = "meth_levels", y = "prob",
add = "reg.line", color = "#28587B",
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE,
cor.coeff.args = list(method = "pearson", label.x = 3, label.sep = "\n"))+
facet_wrap(~variable,ncol=3)
dev.off()
pdf("LGGpredictions.scatterplot.pdf")
ggscatter(current_lgg, x = "meth_levels", y = "prob",
add = "reg.line", color = "#28587B",
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE,
cor.coeff.args = list(method = "pearson", label.x = 0.5, label.sep = "\n"))+
facet_wrap(~variable,ncol=3)
dev.off()
pdf("LGGpredictions.scatterplot.pdf")
ggscatter(current_lgg, x = "meth_levels", y = "prob",
add = "reg.line", color = "#28587B",
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE,
cor.coeff.args = list(method = "pearson", label.x = 0, label.sep = "\n"))+
facet_wrap(~variable,ncol=3)
dev.off()
pdf("LGGpredictions.scatterplot.pdf")
ggscatter(current_lgg, x = "meth_levels", y = "prob",
add = "reg.line", color = "#28587B",
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE,
cor.coeff.args = list(method = "pearson", label.x = 0.2, label.sep = "\n"))+
facet_wrap(~variable,ncol=3)
dev.off()
pdf("LGGpredictions.scatterplot.pdf",w=3,h=6)
ggscatter(current_lgg, x = "meth_levels", y = "prob",
add = "reg.line", color = "#28587B",
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE,
cor.coeff.args = list(method = "pearson", label.x = 0.2, label.sep = "\n"))+
facet_wrap(~variable,ncol=2)
dev.off()
pdf("LGGpredictions.scatterplot.pdf",w=3,h=6)
ggscatter(current_lgg, x = "meth_levels", y = "prob",
add = "reg.line", color = "#28587B",
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE,ellipse.alpha=0.6,
cor.coeff.args = list(method = "pearson", label.x = 0.2, label.sep = "\n"))+
facet_wrap(~variable,ncol=2)
dev.off()
pdf("LGGpredictions.scatterplot.pdf",w=3,h=6)
ggscatter(current_lgg, x = "meth_levels", y = "prob",
add = "reg.line", color = "#28587B",
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE,ellipse.alpha=0.6,ellipse.border.remove=TRUE,
cor.coeff.args = list(method = "pearson", label.x = 0.2, label.sep = "\n"))+
facet_wrap(~variable,ncol=2)
dev.off()
pdf("LGGpredictions.scatterplot.pdf",w=3,h=6)
ggscatter(current_lgg, x = "meth_levels", y = "prob",
add = "reg.line", color = "meth_levels",
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE,ellipse.alpha=0.6,ellipse.border.remove=TRUE,
cor.coeff.args = list(method = "pearson", label.x = 0.2, label.sep = "\n"))+
facet_wrap(~variable,ncol=2)
dev.off()
pdf("LGGpredictions.scatterplot.pdf",w=3,h=6)
ggscatter(current_lgg, x = "meth_levels", y = "prob",
add = "reg.line", color = "meth_levels",
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE,ellipse.alpha=0.6,ellipse.border.remove=TRUE,
cor.coeff.args = list(method = "pearson", label.x = 0.2, label.sep = "\n"))+
scale_colour_gradient(low="#FFC4D1",high="#28587B")+
facet_wrap(~variable,ncol=2)
dev.off()
pdf("LGGpredictions.scatterplot.pdf",w6,h=12)
ggscatter(current_lgg, x = "meth_levels", y = "prob",
add = "reg.line", color = "meth_levels",
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE,ellipse.alpha=0.6,ellipse.border.remove=TRUE,
cor.coeff.args = list(method = "pearson", label.x = 0.2, label.sep = "\n"))+
scale_colour_gradient(low="#FFC4D1",high="#28587B")+
facet_wrap(~variable,ncol=2)
dev.off()
pdf("LGGpredictions.scatterplot.pdf",w=6,h=12)
ggscatter(current_lgg, x = "meth_levels", y = "prob",
add = "reg.line", color = "meth_levels",
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE,ellipse.alpha=0.6,ellipse.border.remove=TRUE,
cor.coeff.args = list(method = "pearson", label.x = 0.2, label.sep = "\n"))+
scale_colour_gradient(low="#FFC4D1",high="#28587B")+
facet_wrap(~variable,ncol=2)
dev.off()
pdf("LGGpredictions.scatterplot.pdf",w=6,h=12)
ggscatter(current_lgg, x = "meth_levels", y = "prob",
add = "reg.line", color = "meth_levels",
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE,ellipse.alpha=0.6,ellipse.border.remove=TRUE,
cor.coeff.args = list(method = "pearson", label.x = 0.3, label.y=0.8, label.sep = "\n"))+
scale_colour_gradient(low="#FFC4D1",high="#28587B")+
facet_wrap(~variable,ncol=2)
dev.off()
cont_table_IDH
cont_tables
lgg_ml_res
lgg_ml_res[[5]]
lgg_ml_res[[5]]$comparison
lgg_75
names(list_lgg)
lgg_ml_res[[5]]
lgg_ml_res[[5]]$comparison
cont_table_DNAmeth[1:4,]
lgg_ml_res[[5]]
lgg_ml_res
str(lgg_ml_res)
library("biomaRt")
library("data.table")
library(plyr)
library(caret)
library(cowplot)
library(patchwork)
library(data.table)
library(minfi)
library("readxl")
library(factoextra)
library(sva)
library(LiblineaR)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("minfi")
library(minfi)
source("clean_methylation_data.R")
source("func_utilities_Turcan.R")
load("annotation_gbm_lgg_July2021.RData")
dmrMouse<-read.delim(file="annotation_dmrs_adi_pval0.05_lfc1.txt",stringsAsFactors = F)
dmrMouse_rid<-unique(dmrMouse[,c(1,2,3,19,17)])
dmrMouse_stats<-dmrMouse[,c(19,13,14,17,18)]
httr::set_config(httr::config(ssl_verifypeer = FALSE))
human = useEnsembl(biomart = "ensembl", dataset = "hsapiens_gene_ensembl", mirror = "useast", host = "https://dec2021.archive.ensembl.org/")
mouse = useEnsembl(biomart = "ensembl", dataset = "mmusculus_gene_ensembl", mirror = "useast", host = "https://dec2021.archive.ensembl.org/")
dmrs_up_mm<-unique(dmrMouse[dmrMouse$status=="DMRs-up",19])
dmrs_down_mm<-unique(dmrMouse[dmrMouse$status=="DMRs-down",19])
hs_dmrs_up_from_mm = getLDS(attributes = c("mgi_symbol"), filters = "mgi_symbol", values = dmrs_up_mm , mart = mouse, attributesL = c("hgnc_symbol"), martL = human, uniqueRows=T)
hs_dmrs_down_from_mm = getLDS(attributes = c("mgi_symbol"), filters = "mgi_symbol", values = dmrs_down_mm , mart = mouse, attributesL = c("hgnc_symbol"), martL = human, uniqueRows=T)
genes_mouse_to_use<-c(hs_dmrs_up_from_mm[,2],hs_dmrs_down_from_mm[,2])
load("GBM_Mouse_beta_matrix_adi_pval0.05_lfc1.RData")
load("LGG_Mouse_beta_matrix_adi_pval0.05_lfc1.RData")
dim(hs_meth_in_mouse_gbm)
dim(hs_meth_in_mouse_lgg)
541+162
list_datasets<-prepareDataTCGAandTurcan(hs_meth_in_mouse_gbm=hs_meth_in_mouse_gbm,hs_meth_in_mouse_lgg=hs_meth_in_mouse_lgg,genes_to_use=genes_mouse_to_use,ann3=ann3)
temp_tcga<-list_datasets[[1]]
tab_input<-fread("GSE30338_81clinic_53cellline_rawbeta.txt.gz",data.table=F,fill=T)
tab_input<-fread("GSE30338_81clinic_53cellline_rawbeta.txt.gz",data.table=F,fill=T)
tab_input2<-tab_input[,colnames(tab_input)%in%c("Gene Symbol",grep(colnames(tab_input),pattern="^s",value=T))]
tab_input3<-cbind(gene_symbol=tab_input2[,ncol(tab_input2)],tab_input2[,-ncol(tab_input2)])
annotation_from_geo<-read.delim("GSE30338_annotation_from_geo.txt",stringsAsFactors = F)
ann_paper <- data.frame(read_excel("Table5a.xls"))
colnames(ann_paper)<-ann_paper[1,]
ann_paper2<-ann_paper[-1,]
annotation_from_geo$Tumour_id<-as.character(annotation_from_geo$Tumour_id)
annotation_final<-merge(annotation_from_geo,ann_paper2,by.x="Tumour_id",by.y="ID number")
tab_input3<-tab_input3[-which(tab_input3$gene_symbol==""),]
gs<-strsplit(as.character(tab_input3[,1]),split="\\;")
gs2<-lapply(gs,FUN=unique)
gs3<-unlist(lapply(gs2,FUN=function(X){paste0(X,collapse=";")}))
tab_input3$gene_symbol<-gs3
check_illumina<-functionCheckGeneMet(gs2,list_genes=genes_to_use)
mat_turcan<-data.table(tab_input3[check_illumina[[1]],])
library("biomaRt")
library("data.table")
library(plyr)
library(caret)
library(cowplot)
library(patchwork)
library(data.table)
library(minfi)
library("readxl")
library(factoextra)
library(sva)
library(LiblineaR)
source("clean_methylation_data.R")
source("func_utilities_Turcan.R")
load("annotation_gbm_lgg_July2021.RData")
dmrMouse<-read.delim(file="annotation_dmrs_adi_pval0.05_lfc1.txt",stringsAsFactors = F)
dmrMouse_rid<-unique(dmrMouse[,c(1,2,3,19,17)])
dmrMouse_stats<-dmrMouse[,c(19,13,14,17,18)]
httr::set_config(httr::config(ssl_verifypeer = FALSE))
human = useEnsembl(biomart = "ensembl", dataset = "hsapiens_gene_ensembl", mirror = "useast", host = "https://dec2021.archive.ensembl.org/")
mouse = useEnsembl(biomart = "ensembl", dataset = "mmusculus_gene_ensembl", mirror = "useast", host = "https://dec2021.archive.ensembl.org/")
dmrs_up_mm<-unique(dmrMouse[dmrMouse$status=="DMRs-up",19])
dmrs_down_mm<-unique(dmrMouse[dmrMouse$status=="DMRs-down",19])
hs_dmrs_up_from_mm = getLDS(attributes = c("mgi_symbol"), filters = "mgi_symbol", values = dmrs_up_mm , mart = mouse, attributesL = c("hgnc_symbol"), martL = human, uniqueRows=T)
hs_dmrs_down_from_mm = getLDS(attributes = c("mgi_symbol"), filters = "mgi_symbol", values = dmrs_down_mm , mart = mouse, attributesL = c("hgnc_symbol"), martL = human, uniqueRows=T)
genes_mouse_to_use<-c(hs_dmrs_up_from_mm[,2],hs_dmrs_down_from_mm[,2])
load("GBM_Mouse_beta_matrix_adi_pval0.05_lfc1.RData")
load("LGG_Mouse_beta_matrix_adi_pval0.05_lfc1.RData")
list_datasets<-prepareDataTCGAandTurcan(hs_meth_in_mouse_gbm=hs_meth_in_mouse_gbm,hs_meth_in_mouse_lgg=hs_meth_in_mouse_lgg,genes_to_use=genes_mouse_to_use,ann3=ann3)
temp_tcga<-list_datasets[[1]]
tcga_dataset<-temp_tcga[which(temp_tcga$type%in%"LGG"),20:ncol(temp_tcga)]
library(data.table)
library(minfi)
library("readxl")
library(factoextra)
functionCheckGeneMet<-function(list_meth=gs2,list_genes=c(hs_dmrs_up_from_mm[,2],hs_dmrs_down_from_mm[,2])){
index_illumina<-NULL
custom_list<-NULL
# index_custom<-data.frame()
# res_match_illumina<-vector(mode="list",2)
for(i in 1:length(gs2)){
print(i)
#i get all the gene symbol annotated with one CGI,
#if there is only 1 gene string_genes is the current genes
#see if the gene annotated is present in your gene list
if(length(gs2[[i]])==1){
string_genes<- paste("^",gs2[[i]],"$",sep="")
ovp<-length(grep(list_genes,pattern=string_genes))
} else{
#i get all the gene symbol annotated with one CGI,
#if there is more than 1 gene string_genes  contains all the genes for the given cgi
#see if the gene annotated is present in your gene list
string_genes<- paste(paste("^",gs2[[i]],"$",sep=""),collapse="|")
ovp<-length(grep(list_genes,pattern=string_genes))
}
#if there is any overlap save the index of the i-th cgi
if(ovp>=1){
index_illumina<-c(index_illumina,i)
indeces_grep<-paste(grep(list_genes,pattern=string_genes),collapse=";")
custom_list<-c(custom_list,indeces_grep)
}
}
res_check_match_illumina<-vector(mode="list",2)
res_check_match_illumina[[1]]<-index_illumina
res_check_match_illumina[[2]]<-custom_list
return(res_check_match_illumina)
}
dmrMouse<-read.delim(file="nnotation_dmrs_adi_pval0.05_lfc1.txt",stringsAsFactors = F)
require("biomaRt")
#Warning-use the last version of Ensembl to convert mgi symbol to hg symbol - call useEnsembl to use a different version
human = useMart("ensembl", dataset = "hsapiens_gene_ensembl")
mouse = useMart("ensembl", dataset = "mmusculus_gene_ensembl")
dmrs_up_mm<-unique(dmrMouse[dmrMouse$status=="DMRs-up",19])
hs_dmrs_up_from_mm = getLDS(attributes = c("mgi_symbol"), filters = "mgi_symbol", values = dmrs_up_mm , mart = mouse, attributesL = c("hgnc_symbol"), martL = human, uniqueRows=T)
dmrs_down_mm<-unique(dmrMouse[dmrMouse$status=="DMRs-down",19])
dmrMouse<-read.delim(file="annotation_dmrs_adi_pval0.05_lfc1.txt",stringsAsFactors = F)
dmrs_up_mm<-unique(dmrMouse[dmrMouse$status=="DMRs-up",19])
hs_dmrs_up_from_mm = getLDS(attributes = c("mgi_symbol"), filters = "mgi_symbol", values = dmrs_up_mm , mart = mouse, attributesL = c("hgnc_symbol"), martL = human, uniqueRows=T)
#Warning-use the last version of Ensembl to convert mgi symbol to hg symbol - call useEnsembl to use a different version
human = useMart("ensembl", dataset = "hsapiens_gene_ensembl", mirror = "useast", host = "https://dec2021.archive.ensembl.org/")
mouse = useMart("ensembl", dataset = "mmusculus_gene_ensembl", mirror = "useast", host = "https://dec2021.archive.ensembl.org/")
#Warning-use the last version of Ensembl to convert mgi symbol to hg symbol - call useEnsembl to use a different version
human = useMart("ensembl", dataset = "hsapiens_gene_ensembl", host = "https://dec2021.archive.ensembl.org/")
mouse = useMart("ensembl", dataset = "mmusculus_gene_ensembl", host = "https://dec2021.archive.ensembl.org/")
dmrs_up_mm<-unique(dmrMouse[dmrMouse$status=="DMRs-up",19])
hs_dmrs_up_from_mm = getLDS(attributes = c("mgi_symbol"), filters = "mgi_symbol", values = dmrs_up_mm , mart = mouse, attributesL = c("hgnc_symbol"), martL = human, uniqueRows=T)
dmrs_down_mm<-unique(dmrMouse[dmrMouse$status=="DMRs-down",19])
hs_dmrs_down_from_mm = getLDS(attributes = c("mgi_symbol"), filters = "mgi_symbol", values = dmrs_down_mm , mart = mouse, attributesL = c("hgnc_symbol"), martL = human, uniqueRows=T)
tab_input<-fread("GSE30338_81clinic_53cellline_rawbeta.txt.gz",data.table=F,fill=T)
tab_input2<-tab_input[,colnames(tab_input)%in%c("Gene Symbol",grep(colnames(tab_input),pattern="^s",value=T))]
tab_input3<-cbind(gene_symbol=tab_input2[,ncol(tab_input2)],tab_input2[,-ncol(tab_input2)])
annotation_from_geo<-read.delim("GSE30338_annotation_from_geo.txt",stringsAsFactors = F)
ann_paper <- data.frame(read_excel("Table5a.xls"))
colnames(ann_paper)<-ann_paper[1,]
ann_paper2<-ann_paper[-1,]
annotation_from_geo$Tumour_id<-as.character(annotation_from_geo$Tumour_id)
annotation_final<-merge(annotation_from_geo,ann_paper2,by.x="Tumour_id",by.y="ID number")
order_classes<-paste("s",1:81,sep="")
#
# Exploratory analysis
#
tab_input3<-tab_input3[-which(tab_input3$gene_symbol==""),]
gs<-strsplit(as.character(tab_input3[,1]),split="\\;")
gs2<-lapply(gs,FUN=unique)
gs3<-unlist(lapply(gs2,FUN=function(X){paste0(X,collapse=";")}))
tab_input3$gene_symbol<-gs3
check_illumina<-functionCheckGeneMet(gs2,c(hs_dmrs_up_from_mm[,2],hs_dmrs_down_from_mm[,2]))
#
#hyper hypo
#
library(ggpubr)
hyper_hypo_mat_meth<-tab_input3[check_illumina[[1]],-1]
melt_up_down<-melt(hyper_hypo_mat_meth)
melt_up_down_ann<-merge(melt_up_down,annotation_final,by.x="variable",by.y="sampleID")
pdf("turcan_hyper_hypo_meth_signals.May.pdf")
p2<-ggviolin(melt_up_down_ann, "epigenetic_status", "value", fill = "epigenetic_status",
palette = c("red3", "green3"),
add = "boxplot", add.params = list(fill = "white"))
my_comparisons<-list(c("CIMP+","CIMP-"))
print(p2+stat_compare_means(comparisons = my_comparisons,method="wilcox.test"))
dev.off()
res.pca <- prcomp(t(hyper_hypo_mat_meth), scale = TRUE)
groups<-annotation_final[match(order_classes,annotation_final$sampleID),"epigenetic_status"]
groups<-as.factor(groups)
pdf("PCA_hyper_and_hypo_DMRs_Turcan.May.pdf")
p<-fviz_pca_ind(res.pca,
col.ind = groups, # color by groups
palette = c("#00AFBB",  "#FC4E07"),
legend.title = "Groups",
label="none",
pointsize = 2.5
)
print(p)
dev.off()
dim(hyper_hypo_mat_meth)
library(data.table)
hyper_hypo_mat_meth_genelevel<-setDT(tab_input3[check_illumina[[1]],])
hyper_hypo_mat_meth_genelevel2<- hyper_hypo_mat_meth_genelevel[, lapply(.SD, mean), by = gene_symbol]
hyper_hypo_mat_meth_genelevel3<-hyper_hypo_mat_meth_genelevel2[,-1]
melt_up_down<-melt(hyper_hypo_mat_meth_genelevel3)
melt_up_down_ann<-merge(melt_up_down,annotation_final,by.x="variable",by.y="sampleID")
pdf("turcan_hyper_hypo_meth_signals_genelevel.May.pdf",width=4,height=4)
p2<-ggviolin(melt_up_down_ann, "epigenetic_status", "value", fill = "epigenetic_status",
palette = c("red3", "green3"),
add = "boxplot", add.params = list(fill = "white"))
my_comparisons<-list(c("CIMP+","CIMP-"))
print(p2+stat_compare_means(comparisons = my_comparisons,method="wilcox.test"))
dev.off()
res.pca <- prcomp(t(hyper_hypo_mat_meth_genelevel3), scale = TRUE)
pdf("PCA_hyper_and_hypo_DMRs_Turcan_genelevel.May.pdf")
p<-fviz_pca_ind(res.pca,
col.ind = groups, # color by groups
palette = c("#00AFBB",  "#FC4E07"),
legend.title = "Groups",
label="none",
pointsize = 2.5)
print(p)
dev.off()
# PCA all hyper in patients
check_illumina_up<-functionCheckGeneMet(gs2,c(hs_dmrs_up_from_mm[,2]))
hyper_mat_meth<-tab_input3[check_illumina_up[[1]],-1]
melt_up<-melt(hyper_mat_meth)
